import os
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from datetime import datetime
import re
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import db_map as db
from random import randint
from config import API_TOKEN
import markups as m

bot = Bot(API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class Add (StatesGroup):
    theme = State()
    wait_dop = State()
    photo = State()

class Reminder(StatesGroup):
    time = State()

async def on_startup(_):
    await db.db_start()
    asyncio.create_task(send_daily_reminders())
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')

@dp.callback_query_handler(lambda query: query.data == "notify")
async def set_reminder(query: types.CallbackQuery):
    user_id = query.from_user.id
    user = await db.user_already_set_reminder(user_id)
    print(user)
    if user == False:
        await query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
        await Reminder.time.set()
    else:
        await query.message.answer("–í—ã —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –≤—Ä–µ–º—è!")

@dp.message_handler(state=Reminder.time)
async def save_reminder_time(message: types.Message, state: FSMContext):
    reminder_time = message.text
    if re.match(r'^\d{2}:\d{2}$', reminder_time):
        user_id = message.from_user.id
        await db.add_reminder(user_id, reminder_time)
        await message.answer("–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        await state.finish()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–ß–ß:–ú–ú)")

async def send_daily_reminders():
    while True:
        current_time = datetime.now().strftime("%H:%M")
        users_to_notify = await db.get_users_for_reminder(current_time)
        for user_id in users_to_notify:
            print(user_id)
            await bot.send_message(user_id, "–¢—ã —É—Å–ø–µ–ª —Å–µ–≥–æ–¥–Ω—è –ø–æ—Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∫–∏?")
        await asyncio.sleep(60)

@dp.callback_query_handler(lambda query: query.data == "info")
async def info(query: types.CallbackQuery):
    await bot.edit_message_text(
        chat_id=query.message.chat.id,
        message_id=query.message.message_id,
        text="–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –∏ –Ω–∞–π–¥–µ–Ω—ã–º –æ—à–∏–±–∫–∞–º –ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É @Kengamath üíå",
        reply_markup = m.infor
    )

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! \U0001F44B –Ø –±–æ—Ç,–∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π –∫ –û–ì–≠ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ! \U0001F4DD"
                        "\n\n\U0001F4D2 –ö–Ω–æ–ø–∫–∞ <b>'–¢–µ–æ—Ä–∏—è'</b> –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–æ—Ä–º—É–ª—ã, —Ç–µ–æ—Ä–µ–º—ã, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏ —Å–≤–æ–π—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –º–æ–≥—É—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–µ "
                        "\n\n\U000023F0 –ù–∞–∂–∞–≤ –Ω–∞ <b>'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'</b>, —Ç—ã —Å–º–æ–∂–µ—à—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—Ä–∞—Å—ã–≤–∞—Ç—å —Å–≤–æ—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É"
                        "\n\n\U0001F4F1 –ï—Å–ª–∏ —Ç—ã –Ω–∞—à—ë–ª –æ—à–∏–±–∫—É –∏–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á–∫—É –∏–ª–∏ —Ç–µ–æ—Ä–∏—é, —Ç–æ —Å–º–µ–ª–æ –ø–µ—Ä–µ—Ö–æ–¥–∏ –≤ <b>'–ö–æ–Ω—Ç–∞–∫—Ç—ã'</b>", parse_mode='HTML', reply_markup=m.keyboard_inline
    )

@dp.callback_query_handler(lambda query: query.data == "theory")
async def theory(query: types.CallbackQuery):
    await bot.edit_message_text(
        chat_id=query.message.chat.id,
        message_id=query.message.message_id,
        text="–†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –æ—Ç–¥–µ–ª–µ —Ç–µ–æ—Ä–∏–∏ üìö"
             "\n–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        reply_markup=m.theory
    )


@dp.callback_query_handler(lambda query: query.data == "sprav1")
async def sprav(query: types.CallbackQuery):
    await bot.edit_message_text(
        chat_id=query.message.chat.id,
        message_id=query.message.message_id,
        text="–û–≥–æ! –ê –≤–æ—Ç –∏ –Ω–∞—à–∏ –ª—é–±–∏–º—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–µ \U0001F60F "
             "\n–¢–∞–∫–∂–µ –∑–¥–µ—Å—å –µ—Å—Ç—å —Å—Å—ã–ª–æ—á–∫–∏ –Ω–∞ –∫–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä, —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –¥–µ–º–æ–≤–µ—Ä—Å–∏—é —ç–∫–∑–∞–º–µ–Ω–∞ 2024 –≥–æ–¥–∞:",

        reply_markup=m.urlkb
    )



@dp.callback_query_handler(lambda query: query.data == "algebra")
async def alg(query: types.CallbackQuery):
    await bot.edit_message_text(
        chat_id=query.message.chat.id,
        message_id=query.message.message_id,
        text="–ê–ª–≥–µ–±—Ä–∞ —Ä–∞–∑–¥–µ–ª –Ω–µ –º–∞–ª–µ–Ω—å–∫–∏–π \U0001F914 "
             "\n –ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ç—ã –∏—â–µ—â—å? ",
        reply_markup=m.algebra_theory
    )


@dp.callback_query_handler(lambda query: query.data == "geometry")
async def alg(query: types.CallbackQuery):
    await bot.edit_message_text(
        chat_id=query.message.chat.id,
        message_id=query.message.message_id,
        text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å—Ç—Ä–∞–Ω—É '–ì–µ–æ–º–µ—Ç—Ä–∏—è' \U0001F3F0"
             "\n–ö–∞–∫–æ–π —Ä–∞–π–æ–Ω –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –∏–∑—É—á–∏—Ç—å?' ",
        reply_markup=m.geom_theory
    )


@dp.callback_query_handler(lambda query: query.data == "back_main")
async def alg(query: types.CallbackQuery):
    await bot.edit_message_text(
        chat_id=query.message.chat.id,
        message_id=query.message.message_id,
        text="–ü—Ä–∏–≤–µ—Ç! \U0001F44B –Ø –±–æ—Ç,–∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π –∫ –û–ì–≠ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ! \U0001F4DD"
                        "\n\n\U0001F4D2 –ö–Ω–æ–ø–∫–∞ <b>'–¢–µ–æ—Ä–∏—è'</b> –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–æ—Ä–º—É–ª—ã, —Ç–µ–æ—Ä–µ–º—ã, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏ —Å–≤–æ–π—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –º–æ–≥—É—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–µ "
                        "\n\n\U000023F0 –ù–∞–∂–∞–≤ –Ω–∞ <b>'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'</b>, —Ç—ã —Å–º–æ–∂–µ—à—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—Ä–∞—Å—ã–≤–∞—Ç—å —Å–≤–æ—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É"
                        "\n\n\U0001F4F1 –ï—Å–ª–∏ —Ç—ã –Ω–∞—à—ë–ª –æ—à–∏–±–∫—É –∏–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á–∫—É –∏–ª–∏ —Ç–µ–æ—Ä–∏—é, —Ç–æ —Å–º–µ–ª–æ –ø–µ—Ä–µ—Ö–æ–¥–∏ –≤ <b>'–ö–æ–Ω—Ç–∞–∫—Ç—ã'</b>", parse_mode='HTML',
        reply_markup=m.keyboard_inline
    )


@dp.callback_query_handler(lambda query: query.data == "back_theory")
async def alg(query: types.CallbackQuery):
    await bot.edit_message_text(
        chat_id=query.message.chat.id,
        message_id=query.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç: ",
        reply_markup=m.theory
    )

@dp.callback_query_handler(lambda query: query.data == "back_theme")
async def alg(query: types.CallbackQuery):
    await bot.edit_message_text(
        chat_id=query.message.chat.id,
        message_id=query.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É: ",
        reply_markup=m.algebra_theory
    )

@dp.callback_query_handler(lambda query: query.data == "back_theme1")
async def alg(query: types.CallbackQuery):
    await bot.edit_message_text(
        chat_id=query.message.chat.id,
        message_id=query.message.message_id,
        text="–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ä–∞–∑–¥–µ–ª: ",
        reply_markup=m.geom_theory
    )

@dp.message_handler(commands=['add'])
async def add_photo_command(message: types.Message):
    await message.reply("–í—ã–±–µ—Ä–∏ —Ç–µ–º—É , –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:", reply_markup=m.inadd)
    await Add.theme.set()

# Function to handle choosing a topic
@dp.callback_query_handler(state=Add.theme)
async def choose_topic(query: types.CallbackQuery, state: FSMContext):
    theme = query.data
    if theme == "uravn":
        await query.message.answer("–ß—Ç–æ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å?", reply_markup=m.urav)
        await Add.wait_dop.set()
        @dp.callback_query_handler(state=Add.wait_dop)
        async def waitt(query: types.callback_query, state: FSMContext):
            theme = query.data
            await state.update_data(theme=theme)
            await Add.photo.set()
            print(theme)
            await query.message.answer("–û—Ç–ª–∏—á–Ω–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!")
    elif theme == "neravenstv":
        await query.message.answer("–ß—Ç–æ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å?", reply_markup=m.nerav)
        await Add.wait_dop.set()
        @dp.callback_query_handler(state=Add.wait_dop)
        async def waitt(query: types.callback_query, state: FSMContext):
            theme = query.data
            await state.update_data(theme=theme)
            await Add.photo.set()
            print(theme)
            await query.message.answer("–û—Ç–ª–∏—á–Ω–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!")
    elif theme == "funct":
        await query.message.answer("–ß—Ç–æ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å?", reply_markup=m.func)
        await Add.wait_dop.set()
        @dp.callback_query_handler(state=Add.wait_dop)
        async def waitt(query: types.callback_query, state: FSMContext):
            theme = query.data
            await state.update_data(theme=theme)
            await Add.photo.set()
            print(theme)
            await query.message.answer("–û—Ç–ª–∏—á–Ω–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!")
    elif theme == "progr":
        await query.message.answer("–ß—Ç–æ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å?", reply_markup=m.prog)
        await Add.wait_dop.set()
        @dp.callback_query_handler(state=Add.wait_dop)
        async def waitt(query: types.callback_query, state: FSMContext):
            theme = query.data
            await state.update_data(theme=theme)
            await Add.photo.set()
            print(theme)
            await query.message.answer("–û—Ç–ª–∏—á–Ω–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!")
    elif theme == "treugolnik":
        await query.message.answer("–ß—Ç–æ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å?", reply_markup=m.treug)
        await Add.wait_dop.set()
        @dp.callback_query_handler(state=Add.wait_dop)
        async def waitt(query: types.callback_query, state: FSMContext):
            theme = query.data
            await state.update_data(theme=theme)
            await Add.photo.set()
            print(theme)
            await query.message.answer("–û—Ç–ª–∏—á–Ω–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!")
    elif theme == "parallelogramm":
        await query.message.answer("–ß—Ç–æ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å?", reply_markup=m.parall)
        await Add.wait_dop.set()
        @dp.callback_query_handler(state=Add.wait_dop)
        async def waitt(query: types.callback_query, state: FSMContext):
            theme = query.data
            await state.update_data(theme=theme)
            await Add.photo.set()
            print(theme)
            await query.message.answer("–û—Ç–ª–∏—á–Ω–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!")
    elif theme == "okru":
        await query.message.answer("–ß—Ç–æ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å?", reply_markup=m.okr)
        await Add.wait_dop.set()
        @dp.callback_query_handler(state=Add.wait_dop)
        async def waitt(query: types.callback_query, state: FSMContext):
            theme = query.data
            await state.update_data(theme=theme)
            await Add.photo.set()
            print(theme)
            await query.message.answer("–û—Ç–ª–∏—á–Ω–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!")
    elif theme == "teorem":
        await query.message.answer("–ß—Ç–æ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å?", reply_markup=m.teo)
        await Add.wait_dop.set()
        @dp.callback_query_handler(state=Add.wait_dop)
        async def waitt(query: types.callback_query, state: FSMContext):
            theme = query.data
            await state.update_data(theme=theme)
            await Add.photo.set()
            print(theme)
            await query.message.answer("–û—Ç–ª–∏—á–Ω–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!")
    else:
        theme = query.data
        await state.update_data(theme=theme)
        await Add.photo.set()
        print(theme)
        await query.message.answer("–û—Ç–ª–∏—á–Ω–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!")


@dp.message_handler(content_types=types.ContentType.PHOTO, state=Add.photo)
async def receive_photo(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    topic = user_data.get('theme')
    file_id = message.photo[-1].file_id
    file_info = await bot.get_file(file_id)
    file_path = file_info.file_path
    await bot.download_file(file_path, f"{topic}_{file_id}.jpg")
    photo_path = f"{topic}_{file_id}.jpg"
    await db.add_photo(topic, photo_path)
    await message.reply(f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è —Ç–µ–º—ã: {topic}")
    await state.finish()

@dp.callback_query_handler(lambda query: query.data == "close")
async def close_button(query: types.CallbackQuery):
    if query.message.text:
        topic = query.message.text.split(":")[1].strip()
        photo_path = await db.get_photo(topic)
        if isinstance(photo_path, tuple) and len(photo_path) > 0:
            photo_path = photo_path[0]
            os.remove(photo_path)
    await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)

@dp.callback_query_handler()
async def query_get(query: types.CallbackQuery):
    topic = query.data
    if topic == "urav":
        await query.message.answer("–£—Ä–∞–≤–Ω–µ–Ω–∏—è –±—ã–≤–∞—é—Ç —Ä–∞–∑–Ω—ã–µ. –ö–∞–∫–æ–π —Ç–∏–ø —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? \U0001F914", reply_markup=m.urav)
        photo_path = await db.get_photo(topic)
        print(f"Photo Path: {photo_path}")

        if isinstance(photo_path, tuple) and len(photo_path) > 0:
            photo_path = photo_path[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
            await bot.send_photo(query.from_user.id, open(photo_path, 'rb'), reply_markup=m.close)
    elif topic == "neravenstv":
        await query.message.answer(f"–ù–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ –±—ã–≤–∞—é—Ç —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤. –ö–∞–∫–∏–µ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç? \U0001F914", reply_markup=m.nerav)
        photo_path = await db.get_photo(topic)
        print(f"Photo Path: {photo_path}")

        if isinstance(photo_path, tuple) and len(photo_path) > 0:
            photo_path = photo_path[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
            await bot.send_photo(query.from_user.id, open(photo_path, 'rb'), reply_markup=m.close)
    elif topic == "funct":
        await query.message.answer(f"–§—É–Ω–∫—Ü–∏–∏ –±—ã–≤–∞—é—Ç —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤. –ö–∞–∫–∏–µ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç? \U0001F914", reply_markup=m.func)
        photo_path = await db.get_photo(topic)
        print(f"Photo Path: {photo_path}")

        if isinstance(photo_path, tuple) and len(photo_path) > 0:
            photo_path = photo_path[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
            await bot.send_photo(query.from_user.id, open(photo_path, 'rb'), reply_markup=m.close)
    elif topic == "progr":
        await query.message.answer("–ü—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ –±—ã–≤–∞—é—Ç —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤. –ö–∞–∫–∏–µ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç? \U0001F914", reply_markup=m.prog)
        photo_path = await db.get_photo(topic)
        print(f"Photo Path: {photo_path}")

        if isinstance(photo_path, tuple) and len(photo_path) > 0:
            photo_path = photo_path[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
            await bot.send_photo(query.from_user.id, open(photo_path, 'rb'), reply_markup=m.close)
    elif topic == "treugolnik":
        await query.message.answer("–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø—Ä–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏? \U0001F914", reply_markup=m.treug)
        photo_path = await db.get_photo(topic)
        print(f"Photo Path: {photo_path}")

        if isinstance(photo_path, tuple) and len(photo_path) > 0:
            photo_path = photo_path[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
            await bot.send_photo(query.from_user.id, open(photo_path, 'rb'), reply_markup=m.close)
    elif topic == "parallelogramm":
        await query.message.answer("–•–º–º, –∫–∞–∫–æ–π —Ä–∞–∑–¥–µ–ª —Ç–µ–±—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª? \U0001F914", reply_markup=m.parall)
        photo_path = await db.get_photo(topic)
        print(f"Photo Path: {photo_path}")

        if isinstance(photo_path, tuple) and len(photo_path) > 0:
            photo_path = photo_path[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
            await bot.send_photo(query.from_user.id, open(photo_path, 'rb'), reply_markup=m.close)
    elif topic == "okru":
        await query.message.answer("–†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –¥–∞–Ω–Ω–æ–º –æ—Ç–¥–µ–ª–µ! –° —á–µ–º –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å? \U0001F914", reply_markup=m.okr)
        photo_path = await db.get_photo(topic)
        print(f"Photo Path: {photo_path}")

        if isinstance(photo_path, tuple) and len(photo_path) > 0:
            photo_path = photo_path[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
            await bot.send_photo(query.from_user.id, open(photo_path, 'rb'), reply_markup=m.close)
    elif topic == "teorem":
        await query.message.answer("–ê –∫—Ç–æ —ç—Ç–æ —Ç—É—Ç —É –Ω–∞—Å? –° —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? \U0001F914", reply_markup=m.teo)
        photo_path = await db.get_photo(topic)
        print(f"Photo Path: {photo_path}")

        if isinstance(photo_path, tuple) and len(photo_path) > 0:
            photo_path = photo_path[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
            await bot.send_photo(query.from_user.id, open(photo_path, 'rb'), reply_markup=m.close)
    else:
        photo_path = await db.get_photo(topic)
        print(f"Photo Path: {photo_path}")

        if isinstance(photo_path, tuple) and len(photo_path) > 0:
            photo_path = photo_path[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
            await bot.send_photo(query.from_user.id, open(photo_path, 'rb'), reply_markup=m.close)







if __name__ == "__main__":
    executor.start_polling(dp,on_startup=on_startup, skip_updates=True)
